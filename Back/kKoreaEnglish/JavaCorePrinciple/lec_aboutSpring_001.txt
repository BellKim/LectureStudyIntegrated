--

다형성(polymorphism) 

다형성: 운전자 - 자동차 

운전자와 자동차 
자동차 자체에 대한 기능은 변함이 없다. 하지만 자동차의 종류는 여러가지가 있다. 
자동차(아반떼, 테슬라 모델3, k3 ) 등등 기존 자동차의 역할을 변형시키지 않으면서 새로운 자동차를 출시할수 있다. 
전기자동차가 나와도, 연료자동차가 나와도 자동차의 역할은 변함이 없는것이다. 
완전 새로운 자동차가 나와도 기존의 자동차의 역할만 구현하면 기존 자동차의 역할을 할 수 있다. 

역할과 구현 만으로 클라이언트에게 영향을 미치지 않는다. 

다형성2 : 공연무대 (로미오와 줄리엣 역할)

로미오와 줄리엣은 로미오역과 줄리엣역 각각의 두 역할이 있다. 

각각 로미오역할을 여러사람이 가능하고, 줄리엣역할도 여러사람이 가능하다. 
로미오와 줄리엣 사람이 바뀌어도 로미오와 줄리엣 연극 자체의 공연에는 변함이 없다. 

이와같이 역할과 구현으로 구분하면 세상이 단순, 유연, 변경이 용이해진다. 


--------
역할 구현의 장점은? 
클라이언트는 대상 역할(인터페이스) 만 알면된다. 
클라이언트는 해당 인터페이스의 내부 구조를 몰라도 된다. (자동차 내부의 세부설계를 몰라도 자동차를 몰수있듯)
클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다. 
클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다. 


역할: 인터페이스 
구현: 인터페이스의 내부구조를 설계한다. 

설계를 할때 역할과 구현을 명확히 분리하는것이 중요하다. 
객체 설계시 역할(인터페이스)를 먼저 부여하고, 그 역할을 수행하는 구현객체를 만든다. (구현보다 역할(인터페이스)가 중요할수 있다.)




좋은 객체지향 설계의 5가지 원칙 (SOLID) (클린코드 도서에서 발췌)
S SRP 단일 책임 원칙(single responsibility principle)
O OCP 개방-패쇄 원칙(open/close principle)
L LSP 리스코프 치환 원칙(Liskov substitution principle)
I ISP 인터페이스 분리 원칙(Interface segregation principle)
D DIP 의존관계 역전 원칙(Dependency inversion principle)













